package assembler;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;

/**
 * Parser
 * @author akpan
 * Objective: 
 * 	- reads an assembly language command
 *  - parses it
 *  - provides convenient access to the command's components (fields and symbols)
 *  - removes all white spaces and comments
 */
public class Parser {
	
	// create a buffered reader
	private BufferedReader br = null;
	private boolean moreCommands = false;
	private String currentCommand = "";
	
	/**
	 * Parser
	 * @param file
	 * Objective: 
	 * 	- opens the input file/stream
	 *  - prepares file to be parsed
	 */
	public Parser(File file){
		try{
			// try to read file
			br = new BufferedReader(new FileReader(file));
		}catch(IOException e){
			e.printStackTrace();
		}finally{
			try{
				if(br != null)
					br.close();
			}catch(IOException ex){
				ex.printStackTrace();
			}
		}
	}
	/**
	 * hasMoreCommands
	 * @return
	 * Output: true/false
	 * Objective: returns true if there are more commands in the output; otherwise, false.
	 */
	private boolean hasMoreCommands(){
		try {
			if((currentCommand = br.readLine()) != null)
				return true;
				
		} catch (IOException e) {
			e.printStackTrace();
		}
		return false;
	}
	
	private void advance(){
		
	}

}
